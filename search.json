[{"title":"C++疏漏记录","path":"/2024/12/27/cpp/","content":"作为靠C++吃饭的选手，但是好多地方都理解的不够到位，就在这个帖子里记录下每次学到的东西吧~ 最大堆&#x2F;优先队列C++提供了priority_queue，默认是最大堆 TODO依稀记得最大堆只需要使用数组就可以完成了，后面复习下数据结构！ 自定义排序priority_queue的默认排序规则是最大堆，当我们需要一个最小堆时，就需要一个自定义的排序对则，仿函数和lambda函数都可以完成这一人物。 1234567struct Compare &#123; bool operator()(int a, int b) &#123; return a &gt; b; &#125;&#125;;std::priority_queue&lt;int, std::vector&lt;int&gt;, Compare&gt; minHeap; 12345auto compare = [](int a, int b) &#123; return a &gt; b; &#125;;std::priority_queue&lt;int, std::vector&lt;int&gt;, decltype(compare)&gt; minHeap(compare); 但是其实一直不明白的是，为什么return a &gt; b就是从小按大排序呢。其实可以把C++的排序，按照优先级去理解。当compare(a,b) &#x3D; true时，那么a的优先级就是小于b的。 比如std::sort默认就是把优先级高的往后排，对于正常的int而言，且没有重载运算符，当 a &lt; b时，那么默认的int排序规则就会返回true，b的优先级就更高，那调用std::sort的时候，就会把b放在a后面，最后结果就是由小到大。 同理，priority_queue默认就是把优先级高的放在堆顶，我们重载的compare，当a的值小于b时，那么返回false，则会认为a的优先级比b高，那就会把a放在堆顶，因此就变成了最小堆。 对象构造之前堆std::sort做排序的时候，仿函数和lambda函数完全一致，但是突然发现，对于上面的优先队列而言，好像并不这么一回事。 12template &lt;typename T, typename Container = std::vector&lt;T&gt;, typename Compare = std::less&lt;typename Container::value_type&gt;&gt;class priority_queue; 这是优先队列的定义，注意这是一个模板，那注定，构造的时候，传入的模板的第三个参数，需要时一个类型，而非对象。 所以compare &#x3D; [](int a, int b) 定义了一个对象，但是传入模板的时候，需要decltype(compare)获取它的具体类型。而仿函数，本身就是一个struct，有明确的类型，直接可以作为模板参数。 此外，可以发现初始化时，lambda还需要多传一个lambda对象进去，而仿函数不用。这是因为priority_queue需要一个compare实例，仿函数有默认构造函数，可以直接构造；但lambda没有，所以就只能传一个进去。"},{"title":"My Trick on Windows & Linux","path":"/2024/12/23/trick/","content":"这里记录一下自己在鼓捣自己电脑的时候，成功试验并觉得有效提升使用体验的一些小技巧吧~ Windows终端windows的cmd命令，可以说是非常的让人无语了，和linux完全的不兼容。而且学习成本非常的高昂。太扯淡啦！&#x1F4A9; 后面推出的WT（windows terminal），虽然在原cmd的基础上增添了很多东西，但是还是完全没法用的程度。继续无语&#x3D;&#x3D;&#x3D; &#x1F33F;。 幸好我们拥有git！安装完git后，我们会直接得到一个git bash。提供了非常接近bash的环境！狂喜！那么，我们可以直接在WT中，设置默认打开的终端环境，这样体验感直接up up! &#x1F44F; 同理，vscode中也可以如此设置~ 快捷键WT的使用频率一高，不想在桌面增加快捷方式，又想要一个快捷的打开方式，该怎么办呢？很自然的想法就是，设置一个快捷键，类似ubuntu的 ctrl + shift + T 一键打开终端。 个人了解的windows的快捷键添加方式有两种： exe发送快捷方式到桌面，右键，巴拉巴拉找到一个快捷键（记不清了） autohotkey！新发现的很不错的软件，本人现在的快捷键也是通过此来配置的 autohotkey官网可直接安装，仅需3M。接下来就是简单了解下它的脚本规则，快捷键的设置规则就是： 1234hotkey ::&#123; Run app&#125; 当然这个软件应当是还可以做很多事情，但是哥们只看了几秒快捷键的设置，只知道这些。 本人目前设置了两个快捷键，已爽翻： Ctrl + Shift + W -&gt; WT Ctrl + Shift + T -&gt; WSL 最后一步将配置文件放置到C:\\Users\\{user_name}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup中，即可开机自启，大功告成！ gcc &amp; clang 安装1pacman -Q 查看安装了哪些包 1pacman -S &#123;package name&#125; 安装指定的包 1pacman -Ss 列出所有可用的包（包括未安装的） 1pacman -Qi &#123;package_name&#125; 查看某个包的详细信息 1pacman -Syu 更新包管理器 本人用mysy2构建了全套的C++编译工具，包括clang、clangd、gcc、make、cmake。爽歪歪。本条命令用来安装clangd 1pacman -S mingw-w64-ucrt-x86_64-clang-tools-extra 搭配clang插件，vscode写C++的体验感再一次提升了。clion请直接退休好吗。值得一提的，哥们曾在wsl也搞过clangd，但是启动后的几秒就会直接崩掉，且没有找到解决办法。也许是分配给wsl的内存太少了？不过现在在windows下的体验还是非常的顶呱呱的。嘻。"},{"title":"LeetCode刷题记录","path":"/2024/12/21/leetcode/","content":"记录刷题的每一天！感受逐渐变强的自己！ 环境配置VsCode + labuladong vscodevscode的安装无需多言了 leetcode 插件在leetcode网站上刷题体验感实际上是很一般的。主要是补全差劲；字体难看；等等等。所有就有了leetcode刷题插件的诞生。可以自由的在vscode里读题、写代码、提交代码。 但很不好的是，它给你生成的代码内容是不包含头文件的，会导致vscode报错飘红，体验感依旧不足够高。 labuladong的算法插件labuladong大佬在leetcode插件上进一步开发的。属于是弥补了原插件的许多不足之处。具体的说法和细则，请看官网。体验感已经是本人能找到的非常棒的了。不过还有缺点就是，不能直接构造main函数，构建测试用例，使得可以直接开始debug。 另外仍需注意，该插件只能用cookie登录。需要在网络控制台中，抓一个带有cookie字样的包然后右键， Copy as cURL (bash)，随后开启新世界大门！ 547 省份数量老听并查集的大名，但是一直没有学习过，直接拿上547题来练手。 并查集学过一遍之后，并查集应该是要用数组表示的树？很吊的。 反正啥操作前都加个find_parent就对了！ 构造函数一个并查集可以有n个节点，初始化时，各个节点都先自己指向自己，每个节点都是一个单独的集合。 123456UnionFind(int n)&#123; array_.resize(n); for(int i = 0 ; i &lt; n;i++)&#123; array_[i] = i; // 并查集自己先指向自己 &#125;&#125; 合并函数合并函数就是一个集合的父节点，指向另一个集合的父节点，这样他们就合并成了一撮，变成了同一个集合。 1234void to_union(int child, int parent)&#123; // ! 注意，并查集的操作，是对父节点的操作，一切要以父节点为准 array_[find_parent(child)] = find_parent(parent);&#125; 其他的合并方式假如union(1,2)、union(2,3)、union(3,4)，这样循环的调用，那节点之间的指向关系，明显是一个链状的，当然这是最坏的情况，有没有什么好的压缩的方法呢？ 其实就是希望合并之后，树的高度尽可能的矮嘛，那可以额外的增加一个数组，记录每个集合的高度，合并的时候，矮的指向高的，不就不会导致高度过分的增加了嘛。 当然，更佳的一个做法是，用上路径压缩。 寻根函数（带路径压缩）讲解视频 12345678910int find_parent(int i)&#123; // 视频中所述，并查集要注意 !路径压缩! 不然一个集合里的排布是一长串，复杂度不是最优 if (array_[i] == i)&#123; return i; // 已经找到根节点了 &#125;else&#123; array_[i] = find_parent(array_[i]); // 这里就是在做路径压缩 return array_[i]; &#125;&#125; 一共有多少集合呢反正我是用一个集合，但是感觉实际是很愚蠢的！ 1234567int get_num()&#123; unordered_set&lt;int&gt; statistic_set; for (int i = 0; i &lt; array_.size(); i++)&#123; statistic_set.insert(find_parent(i)); &#125; return statistic_set.size();&#125; 可以在每次合并，就将合并次数++！那集合的数量，不就是 size - merge_count吗！ 不解但是并查集的时间复杂度咋算呢？回头再学习学习吧。 链表题目21.合并两个有序链表 &amp;&amp; 86.分隔链表主要涉及到的技巧是： dummy虚拟头结点的使用，可以有效的避免很多的边界条件判断 如果是把原链表重新构造成一个新的链表，那总是需要断开原链表之间的连接关系，欲断不断，就会导致最后的链有可能成环，一定要注意！ 23.合并k个有序链表这题一看有点蒙蔽，这怎么比节点们的大小，然后瞅一眼题解，竟然是已经遗忘已久的优先队列，惭愧惭愧，彻底的还给老师了。这题显然也是没有涉及new操作的，把原链表拼成新链表的操作，类似上面提到的，要断开每个节点之间的联系。当然这题可以不断，但是还是保持这个好习惯的好。 然后值得记录的是，C++优先队列的初始化，记录在同级的C++博客中了。 19.删除链表的倒数第N个节点主要是设计到了寻找倒数第N个节点的技巧，使用快慢指针。就是一个指针先走N步，然后另一个指针再开始走，当快指针走到头的时候，慢指针就走到了倒数第N个节点。 12345678910111213141516// 返回链表的倒数第 k 个节点ListNode* findFromEnd(ListNode* head, int k) &#123; ListNode* p_fast = head; // p_fast 先走 k 步 for (int i = 0; i &lt; k; i++) &#123; p_fast = p_fast -&gt; next; &#125; ListNode* p_slow = head; // p_fast 和 p_slow 同时走 n - k 步 while (p_fast != nullptr) &#123; p_slow = p_slow -&gt; next; p_fast = p_fast -&gt; next; &#125; // p_slow 现在指向第 n - k + 1 个节点，即倒数第 k 个节点 return p_slow;&#125; 注意的是，当p_fast指向链表的尾部的nullptr时，p_slow指向的才是倒数第k个节点。当p_fast指向链表的最后一个节点时，p_slow指向的是倒数第k+1个节点。 比较极限的情况是，链表要删除第一个节点，但这时候第一个节点前面也没有节点了，此时就需要dummy节点了，在链表最开始插上一个头结点，这样就可以避免很多的边界条件判断。当你使用了dummy节点后，返回值一般是dummy-&gt;next，本题可不能看到说返回头节点，就return head，会出错。 876.链表的中间结点这题思路倒是很简单，一快一慢就好。主要是停止的边界条件怎么设置。 12345678910ListNode* middleNode(ListNode* head) &#123; ListNode *p_slow = head, *p_fast = head; // !仔细思考下这个边界条件的设置 // while (p_fast-&gt;next != nullptr and p_fast != nullptr) &#123; while (p_fast != nullptr and p_fast-&gt;next != nullptr) &#123; p_slow = p_slow-&gt;next; p_fast = p_fast-&gt;next-&gt;next; &#125; return p_slow; &#125; 快指针每次移动两步，那什么是否停止移动呢？就是当快指针不能再往下移动了，即快指针不为空，或者快指针的下个元素不空。 需要注意一点，p_fast != nullptr 要放在前面先判断，否则p_fast == nullptr时，执行p_fast-&gt;next != nullptr铁会出现问题。 142.环形链表链表如果有环，典型做法就是，快慢指针，如果相遇了就证明有环。 1234567while (p_fast != nullptr and p_fast-&gt;next != nullptr) &#123; p_slow = p_slow-&gt;next; p_fast = p_fast-&gt;next-&gt;next; if (p_slow == p_fast) &#123; break; &#125;&#125; 就两种情况退出循环: 无环，fast走到尽头，触发while条件，退出 有环，相交退出 可以发现，即使长度为1的有环无环链表，这个代码都能正常工作，所以其实无需什么边界情况处理。对于此题，要找到入口处的节点，需要一些数学证明： 我们假设快慢指针相遇时，慢指针 slow 走了 k 步，那么快指针 fast 一定走了 2k 步 fast 一定比 slow 多走了 k 步，这多走的 k 步其实就是 fast 指针在环里转圈圈，所以 k 的值就是环长度的「整数倍」。 这里是整数倍哦。 假设相遇点距环的起点的距离为 m，环的起点距头结点 head 的距离为 k - m，也就是说如果从 head 前进 k - m 步就能到达环起点。 巧的是，如果从相遇点继续前进 k - m 步，也恰好到达环起点 沿用此思路，即可解出此题 160.相交链表本人的直接想法就是，先遍历一遍，找到他们的头距离差距，然后直接对齐，顺序往后移动就好~ 123456789101112131415161718192021222324252627282930ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) &#123; int len_a = 0, len_b = 0; ListNode *pa = headA, *pb = headB; while (pa != nullptr) &#123; pa = pa-&gt;next; len_a++; &#125; while (pb != nullptr) &#123; pb = pb-&gt;next; len_b++; &#125; pa = headA, pb = headB; if (len_a &gt; len_b) &#123; int delta_len = len_a - len_b; for (int i = 0; i &lt; delta_len; i++) &#123; pa = pa-&gt;next; &#125; &#125; else &#123; int delta_len = len_b - len_a; for (int i = 0; i &lt; delta_len; i++) &#123; pb = pb-&gt;next; &#125; &#125; while (pa != pb) &#123; pa = pa-&gt;next; pb = pb-&gt;next; &#125; return pa;&#125; labuladong提供了两个更奇思妙想的方法： 第一条遍历完去走第二条，第而条遍历完去走第一条，当他们相遇的时候，就成了 公链的最后一个节点指向其中一条的起点，问题就变成了，寻找环的起点，即142题 数组题目26.删除有序数组中的重复项这题一开始的想法是，一个指针指向前面，一个指针指向后面，然后遇到重复的就swap一下，但是这样搞完之后就不有序了，想了半天没有想到解决办法。可恶啊，被一道easy题给拿下了。 思路同样是快慢指针，但是这个不同于链表快慢指针是慢指针的两倍速，但是本题，slow是待在后方，维护着迄今为止的正确的结果，fast是在前面探路的，他们的速度差距是由数组元素的排布造成的。 本人的笨笨代码，实在是太蠢了。 index不用非要从1开始 也不用记录fast走过的上一个值，只需要比较fast和slow的值，因为slow的元素必定是最新的不重复的那个值 12345678910111213141516int removeDuplicates(vector&lt;int&gt;&amp; nums) &#123; int slow = 1, fast = 1; int size = nums.size(); int last_value = nums[0]; while(fast &lt; size)&#123; if(nums[fast] == last_value)&#123; fast++; &#125;else &#123; nums[slow] = nums[fast]; last_value = nums[fast]; fast++; slow++; &#125; &#125; return slow;&#125; 标准答案 12345678910111213141516int removeDuplicates(vector&lt;int&gt;&amp; nums) &#123; if (nums.size() == 0) &#123; return 0; &#125; int slow = 0, fast = 0; while (fast &lt; nums.size()) &#123; if (nums[fast] != nums[slow]) &#123; slow++; // 维护 nums[0..slow] 无重复 nums[slow] = nums[fast]; &#125; fast++; &#125; // 数组长度为索引 + 1 return slow + 1;&#125; 27.移除数组和本题同理 283.移动零我简直是个智障吧，这也没想出来。其实只需要两步： 按照27题的思路，删除所有为0的元素 把末尾的元素，全部置为0 比较有迷惑性的是这道题的表述，他说把为0的元素移动到最后。这个移动就很灵性，让我以为必须是什么元素要交换一下，所以该怎么遍历，才能把0都给换到后面呢。所以苦思冥想了半天，还是太死板了…… 但是答案就是先删再赋值。虽然简单，但实在是巧妙呀。 数组题目，凡是涉及到原地修改、保持原来元素的相对顺序 等要求，就往快慢指针这里想一想。 左右指针基本上有两种形式： 左右指针向中间收缩 左右指针向两边扩散 167.两数之和这道题就是典型的向中间收缩的左右指针。思路并不困难，但是有继续引申的nSum问题，后面得好好继续研究下。 1234567891011121314vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; numbers, int target) &#123; int left = 0, right = numbers.size() - 1; while (left &lt; right) &#123; int sum = numbers[left] + numbers[right]; if (sum &lt; target) &#123; left++; &#125; else if (sum &gt; target) &#123; right--; &#125; else if (sum == target) &#123; return &#123;left + 1, right + 1&#125;; &#125; &#125; return &#123;0, 0&#125;;&#125; 5.最长回文子串这道题是典型的向两边扩散的左右指针，一开始确实也没啥思路，看了答案才豁然开朗。 回文串分为奇数和偶数，奇数时有一个中心点，偶数时有两个中心点。首先给出一个有中心点向两边扩散，寻找最长回文串的代码。 12345678string huiwenStr(string&amp; str, int left, int right) &#123; while (left &gt;= 0 and right &lt; str.size() and str[left] == str[right]) &#123; left--; right++; &#125; // !notice 注意当它停止的时候，left指向了回文串的两边，所以要left + 1 return str.substr(left + 1, right - left - 1);&#125; 代码固定需要传入两个中心点，left = right 就是奇数串，left + 1 = right 就是偶数串。然后需要注意边界控制，left、right应该是一个正确的索引，不能越界，所以是left &gt;= 0 and right &lt; str.size()，之前自己写成left &gt; 0显然是有问题的 然后需要注意，while循环需要保证回文串的特性才能继续循环，即tr[left] == str[right]，以及最后返回的子串，left + 1才是回文串的起点，长度为right - left - 1 最后仅需要遍历每一个可能的中心点，就可以找到最长的回文串 123456789101112131415string longestPalindrome(string s) &#123; string max_str = &quot;&quot;; for (int i = 0; i &lt; s.size(); i++) &#123; // 以i为中心的奇数串 string str1 = huiwenStr(s, i, i); string str2 = huiwenStr(s, i, i + 1); if (str1.size() &gt; max_str.size()) &#123; max_str = str1; &#125; if (str2.size() &gt; max_str.size()) &#123; max_str = str2; &#125; &#125; return max_str;&#125; 二分查找今天，我要学会自己做二分搜索！ 首先，我们要明确，二分搜索的区间可以分为左闭右闭[left, right],也可以分为左闭右开[left, right)，但是哥们独爱左闭右闭，所以后续所有的写法都是左闭右闭。 普通二分搜索1234567891011121314int search(vector&lt;int&gt;&amp; nums, int target) &#123; int left = 0, right = nums.size() - 1; while (left &lt;= right) &#123; int mid = left + (right - left) / 2; if (nums[mid] == target) &#123; return mid; &#125; else if (nums[mid] &lt; target) &#123; // target比中间值大，那么就要从右边的区间找 left = mid + 1; &#125; else &#123; right = mid - 1; &#125; &#125; return -1;&#125; 左闭右闭体现在初始化的时候，如果right = nums.size()-1，那么nums[right]就是可以直接访问的，那么右边区间就是闭合的，就是左闭右闭。 while循环何时停止呢？当然是[left, right]这个区间不成立的时候，即left = right + 1当nums[mid] 不符合target时，那就要调整区间的范围了。调整的幅度就是在mid左右，设置为新的左&#x2F;右边界 左&#x2F;右边界的二分搜索 &amp; 34.在排序数组中查找元素的第一个和最后一个位置之前都没有想过，二分搜索竟然还能这么玩。 123456789101112131415161718192021int left_bound(vector&lt;int&gt;&amp; nums, int target) &#123; // 可以自动适配size = 0 的情况，无需额外适配 int res1; int left = 0, right = nums.size() - 1; while (left &lt;= right) &#123; int mid = left + (right - left) / 2; if (nums[mid] == target) &#123; right = mid - 1; &#125; else if (nums[mid] &gt;= target) &#123; right = mid - 1; &#125; else if (nums[mid] &lt;= target) &#123; left = mid + 1; &#125; &#125; if (left &gt;= nums.size()) &#123; res1 = -1; &#125; else &#123; res1 = nums[left] == target ? left : -1; &#125; return res1;&#125; 此二分搜索大部分和普通的是一样的，但是当nums[mid] == target时，就有区别了。因为我们要找左边的边界，那么就更新区间右边界，继续去找。 本部分我一开始的疑问是，如果此时的mid已经是最左边的target元素，那就调用了right &#x3D; mid - 1，去再左边找元素了，那岂不是就再也找不到这个target元素了吗？ debug了一遍才发现，如果此时的mid已经是最左边的target元素，那么继续找下去，left和right一定会走到：left = right = mid - 1！然后，进入分支left = (left + right) / 2 + 1 = mid -1 + 1 = mid，可以发现，当退出while后，left恰巧又指向了最左边的target元素，很巧妙，很神奇吧。太屌了。 还有个区别是，当数组中不存在target元素时，需要额外的边界控制： target大于数组的最大值，很明显，这种情况，left最后会指向 nums.size()，发生了越界，所以需要特判，越界了返回-1 target的大小是包含在数组的上下界里的，这种情况，left会指向大于 target 的最小索引，所以需要判断nums[left] == target，不等于则是没有找到 1234567891011121314151617181920int right_bound(vector&lt;int&gt;&amp; nums, int target) &#123; int res2; int left = 0, right = nums.size() - 1; while (left &lt;= right) &#123; int mid = left + (right - left) / 2; if (nums[mid] == target) &#123; left = mid + 1; &#125; else if (nums[mid] &gt;= target) &#123; right = mid - 1; &#125; else if (nums[mid] &lt;= target) &#123; left = mid + 1; &#125; &#125; if (right &lt; 0) &#123; res2 = -1; &#125; else &#123; res2 = nums[right] == target ? right : -1; &#125; return res2;&#125; 寻找右边界一样的道理，只不过 nums[mid] == target时，就更新区间左边界，继续去找。 right有可能指向-1，数组越界，需额外判断 滑动窗口也是左右指针，但和数组一节里的左右指针完全不一样，这个左右像是分先后平移的窗户，并不会扩散或者收缩。 滑动窗口的时间复杂度是O(N)，它和双重循环暴力遍历的区别是：无需要穷举所有子串，通过对穷举过程进行剪枝优化，避免冗余计算 通用模板是： 1234567891011121314151617181920212223242526272829303132333435void slidingWindow(string s) &#123; // 用合适的数据结构记录窗口中的数据，根据具体场景变通 // 比如说，我想记录窗口中元素出现的次数，就用 map // 如果我想记录窗口中的元素和，就可以只用一个 int auto window = ... int left = 0, right = 0; while (right &lt; s.size()) &#123; // c 是将移入窗口的字符 char c = s[right]; window.add(c); // 增大窗口 right++; // 进行窗口内数据的一系列更新 ... // *** debug 输出的位置 *** printf(&quot;window: [%d, %d) &quot;, left, right); // 注意在最终的解法代码中不要 print // 因为 IO 操作很耗时，可能导致超时 // 判断左侧窗口是否要收缩 while (window needs shrink) &#123; // d 是将移出窗口的字符 char d = s[left]; window.remove(d); // 缩小窗口 left++; // 进行窗口内数据的一系列更新 ... &#125; &#125;&#125; 注意right++的位置，放在外层while循环开头、末尾都是可以的，一个是左闭右开区间，一个是左闭右闭区间，基本没啥区别。 76.最小覆盖子串这道题思路是： 右边界不断向右扩散 当右边界扩散到可以满足要求的时候，收缩左边界 收缩左边界途中，记录更新最小的子串 收缩到不再满足条件，继续扩散右边界，重复这个步骤 1234567891011121314151617181920212223242526272829303132333435363738string minWindow(string s, string t) &#123; unordered_map&lt;char, int&gt; map_count; vector&lt;char&gt; total_char; for (int i = 0; i &lt; t.size(); i++) &#123; map_count[t[i]]++; &#125; for (auto&amp; pair : map_count) &#123; total_char.push_back(pair.first); &#125; auto check_func = [&amp;]() -&gt; bool &#123; for (auto c : total_char) &#123; if (map_count[c] &gt; 0) &#123; return false; &#125; &#125; return true; &#125;; int left = 0, right = 0; int min_len = INT_MAX; int start = 0; while (right &lt; s.size()) &#123; if (map_count.find(s[right]) != map_count.end()) &#123; map_count[s[right]]--; &#125; while (check_func()) &#123; if (right - left + 1 &lt; min_len) &#123; min_len = right - left + 1; start = left; &#125; if (map_count.find(s[left]) != map_count.end()) &#123; map_count[s[left]]++; &#125; left++; &#125; right++; &#125; return min_len != INT_MAX ? s.substr(start, min_len) : &quot;&quot;;&#125; 这题我写的时候踩过两个坑： 如果你把right++ 写到了外层循环的一开始，那min_len的计算就是right - left，这里就是左闭右开，一个是左闭右闭的区别 我以为，如果找到了串，那while循环结束后，最后left和right就是最小的串了。但并不是这样！实际上窗口是在不断地扩散、收缩、扩散….子串可能在其中的一次收缩中出现，所以要用变量去记录，而非最后的left、right就是正确结果 关于本题怎么记录是否可以收缩了，我直接就是遍历哈希表，进行查找，还有一种题解可以看下题的写法 567.字符串的排列这道题和上一道题非常非常的类似，只不过这道题的窗口长度是固定的，解法如下： 1234567891011121314151617181920212223242526272829303132bool checkInclusion(string s1, string s2) &#123; unordered_map&lt;char, int&gt; little_map, big_map; for (auto c : s1) &#123; little_map[c]++; &#125; int left = 0, right = 0; int valid = 0; while (right &lt; s2.size()) &#123; if (little_map.find(s2[right]) != little_map.end()) &#123; big_map[s2[right]]++; if (big_map[s2[right]] == little_map[s2[right]]) &#123; valid++; &#125; &#125; while (right - left + 1 &gt;= s1.size()) &#123; if (valid == little_map.size()) &#123; return true; &#125; if (little_map.find(s2[left]) != little_map.end()) &#123; if (big_map[s2[left]] == little_map[s2[left]]) &#123; valid--; &#125; big_map[s2[left]]--; &#125; left++; &#125; right++; &#125; return false;&#125; 这种题解记录收缩条件，用的是一个vaild计数，vaild代表符合条件的字符的数量。 本题需要注意： valid == little_map.size(), 等于的是s1中出现的字符类型数量，而不是s1的长度 while中的条件，要有等号&#x3D;。可以想象，当窗口长度正好为s1长度时，while里left–，紧接着while退出之后，right++，正好可以维持窗口长度不变 本题窗口长度是固定的，所以第二层的while可以是if big_map[s2[right]]++ big_map[s2[left]]--的时机不同，一个是在big_map操作前，一个是在big_map操作后 438.找到字符串中所有字母异位词 与本题同理 3.无重复字符的最长子串这题的收缩左边界的条件比较独特，是s[right]的计数有多个 123456789101112131415int lengthOfLongestSubstring(string s) &#123; int left = 0, right = 0; int max_len = 0; unordered_map&lt;char, int&gt; alpha_count; while (right &lt; s.size()) &#123; alpha_count[s[right]]++; while (alpha_count[s[right]] &gt; 1) &#123; alpha_count[s[left]]--; left++; &#125; max_len = max(max_len, right - left + 1); right++; &#125; return max_len;&#125; 动态规划作为一直刷题都没刷明白的一大块，这一次，我要狠狠的拿下它！ 动态规划的三要素： 重叠子问题 最优子结构 状态转移方程 所谓动态规划，就是从底到高的迭代，为啥这么难想呢，我觉得很大一部分原因是因为逆着人的思维模式了。能从底到高，就能从高到低，这就是我们常说的，递归！ 斐波那契数列labuladong 循循善诱的讲解了动态规划，使我无敌的受用。但是今天时间太晚了，我选择稍微晚一些再来记录其中的精髓到这里。 典型的斐波那契数列，可以很好的诠释动态规划的精髓。首先，一开始学会的解决就是递归，如下如所示： 很明显，这样的递归树，有很多的节点相当于被重复计算了，时间复杂度 $O(2^n)$，直接爆炸。显然我们可以用一个数组记录每个节点的值，当递归的时候发现数组里有值，那么就直接返回，无需重新计算，即一个备忘录。如下图所示，可以发现，就像是对这颗递归树进行了剪枝。 再精简下，就是：可见已经被优化成了一个链表形式，时间复杂度$O(n)$ 这种解法是「自顶向下」进行「递归」求解，动态规划则是「自底向上」进行「递推」求解，可有代码： 123456789101112int fib(int N) &#123; if (N == 0) return 0; vector&lt;int&gt; dp(N + 1); // base case dp[0] = 0; dp[1] = 1; // 状态转移 for (int i = 2; i &lt;= N; i++) &#123; dp[i] = dp[i - 1] + dp[i - 2]; &#125; return dp[N];&#125; 322.零钱兑换首先，如果你需要money，此时硬币的选项有coin，那需要多少个硬币呢，显然就是 dp[money - coin] + 1。那这样就拆解成了子问题。我们以递归的方式去思考，那money -coin继续向下分解子问题，啥时候会返回呢。那就是有确切解的时候了。当money &#x3D; 0时，需要0个；当money &lt; 0时，无解 这样我们就可以写出一个递归形式的代码了： 123456789101112131415161718192021222324252627class Solution &#123;public: int coinChange(vector&lt;int&gt;&amp; coins, int amount) &#123; // 题目要求的最终结果是 dp(amount) return dp(coins, amount); &#125;private: // 定义：要凑出金额 n，至少要 dp(coins, n) 个硬币 int dp(vector&lt;int&gt;&amp; coins, int amount) &#123; // base case if (amount == 0) return 0; if (amount &lt; 0) return -1; int res = INT_MAX; for (int coin : coins) &#123; // 计算子问题的结果 int subProblem = dp(coins, amount - coin); // 子问题无解则跳过 if (subProblem == -1) continue; // 在子问题中选择最优解，然后加一 res = min(res, subProblem + 1); &#125; return res == INT_MAX ? -1 : res; &#125;&#125;; 当然了，这样可能会有很多的子问题被重复计算，那么只需要用一个备忘录进行记录，不就好啦。 1234567891011121314151617181920212223242526272829303132class Solution &#123;public: int coinChange(vector&lt;int&gt;&amp; coins, int amount) &#123; memo = vector&lt;int&gt; (amount + 1, -666); // 备忘录初始化为一个不会被取到的特殊值，代表还未被计算 return dp(coins, amount); &#125;private: vector&lt;int&gt; memo; int dp(vector&lt;int&gt;&amp; coins, int amount) &#123; if (amount == 0) return 0; if (amount &lt; 0) return -1; // 查备忘录，防止重复计算 if (memo[amount] != -666) return memo[amount]; int res = INT_MAX; for (int coin : coins) &#123; // 计算子问题的结果 int subProblem = dp(coins, amount - coin); // 子问题无解则跳过 if (subProblem == -1) continue; // 在子问题中选择最优解，然后加一 res = min(res, subProblem + 1); &#125; // 把计算结果存入备忘录 memo[amount] = (res == INT_MAX) ? -1 : res; return memo[amount]; &#125;&#125;; 这样就是一个自顶向下的递归过程了，那这个思路已经想明白，那我们直接就进行一个自底向上的改造。 123456789101112int coinChange(vector&lt;int&gt;&amp; coins, int amount) &#123; vector&lt;int&gt; dp(amount + 1, INT_MAX); dp[0] = 0; for (int money = 1; money &lt;= amount; money++) &#123; for (auto coin : coins) &#123; if (money - coin &gt;= 0 and dp[money - coin] != INT_MAX) &#123; dp[money] = min(dp[money], dp[money - coin] + 1); &#125; &#125; &#125; return dp[amount] == INT_MAX ? -1 : dp[amount];&#125; 这就是完整的一次动态规划的做题经历 贪心策略我的理解是，贪心是特殊的动态规划，贪心同样适合以从高到低的视角去分解成子问题，只不过这个子问题的解非常的显然，可以直接选出来。 55.跳跃游戏这道题怎么递归的去想呢，我们站在第0个元素，它能跳到哪些位置，是知道的，我们在这些地方继续递归，如果某个叶节点可以走到末尾，那就是能到的。如果每个叶节点都不能走到，那就是不能到的。 如果按照之前动态规划的思想，这道题应该是从最后的元素往上回溯，代码怎么写我是没想明白的。 这题的解法是从0位置元素向尾部迭代，所以这其实应该算是对递归进行一个剪枝？ 1234567891011bool canJump(vector&lt;int&gt;&amp; nums) &#123; vector&lt;int&gt; dp(nums.size(), 0); dp[0] = nums[0]; for (int i = 1; i &lt; nums.size(); i++) &#123; if (i &gt; dp[i - 1]) &#123; return false; &#125; dp[i] = max(dp[i - 1], i + nums[i]); &#125; return dp.back() &gt;= dp.size() - 1 ? true : false;&#125; dp[i]表示前第i个节点的能跳跃到的最大距离; 很显然，dp[i]只和dp[i-1]有关, 所以可以优化空间，只需要一个变量rightMax就行 1234567891011121314bool canJump(vector&lt;int&gt;&amp; nums) &#123; int len = nums.size(); int rightMax = 0; for (int i = 0; i &lt; nums.size(); i++) &#123; if (i &gt; rightMax) &#123; return false; &#125; rightMax = max(rightMax, i + nums[i]); if (rightMax &gt;= len - 1) &#123; return true; &#125; &#125; return false;&#125; 45.跳跃游戏可有这样的递归方式 123456789101112131415161718192021222324252627282930313233343536class Solution &#123;public: vector&lt;int&gt; memo; // 主函数 int jump(vector&lt;int&gt;&amp; nums) &#123; int n = nums.size(); // 备忘录都初始化为 n，相当于 INT_MAX // 因为从 0 跳到 n - 1 最多 n - 1 步 memo = vector&lt;int&gt;(n, n); return dp(nums, 0); &#125; // 定义：从索引 p 跳到最后一格，至少需要 dp(nums, p) 步 int dp(vector&lt;int&gt;&amp; nums, int p) &#123; int n = nums.size(); // base case if (p &gt;= n - 1) &#123; return 0; &#125; // 子问题已经计算过 if (memo[p] != n) &#123; return memo[p]; &#125; int steps = nums[p]; // 你可以选择跳 1 步，2 步... for (int i = 1; i &lt;= steps; i++) &#123; // 穷举每一个选择 // 计算每一个子问题的结果 int subProblem = dp(nums, p + i); // 取其中最小的作为最终结果 memo[p] = min(memo[p], subProblem + 1); &#125; return memo[p]; &#125;&#125;; 这道题的贪心性质可见下面的示意图 当你向后跳跃时，未来跳的最远的那个点，可以跳到其他方式可以到达打任意点，所以直接无脑选跳的最远的那个点就可以。故可以直接写成这样： 1234567891011121314151617181920int jump(vector&lt;int&gt;&amp; nums) &#123; int position = 0; int count = 0; while (position &lt; nums.size() - 1) &#123; int far = 0; int max_index = 0; for (int i = 1; i &lt;= nums[position]; i++) &#123; if (position + i &gt;= nums.size() - 1) &#123; return count + 1; &#125; if (position + i + nums[position + i] &gt; far) &#123; far = position + i + nums[position + i]; max_index = i; &#125; &#125; position = position + max_index; count++; &#125; return count;&#125; 这里要注意，返回的时机，position + i是当前能够跳到的地方，当你已经能够跳到最后一个元素的时候，即position + i &gt;= nums.size() - 1，直接着手返回即可。 当然，题解里的解法是一个for循环，这题解同样需要注意，和上一种for循环的范围是left &lt; nums.size() - 1。 这是因为，这个题解中，end是离你最近的一次farest，是一次起跳的起点。所以当left = 0时，跳跃基础就会增加一次，意味着从这里起跳。 123456789101112int jump(vector&lt;int&gt;&amp; nums) &#123; int farthest = 0, end = 0; int count = 0; for (int left = 0; left &lt; nums.size() - 1; left++) &#123; farthest = max(farthest, left + nums[left]); if (left == end) &#123; count++; end = farthest; &#125; &#125; return count;&#125; BFS遍历 如果你发现什么要求求出最短路径，不妨直接往BFS遍历去想一想 773.滑动谜题这道题实在是非常的巧妙，把每次移动，都看做是一个路径，每次移动后得到的结果，视为一个节点。用到了两个技巧： 2*3 的棋盘，按行遍历转换为字符串做唯一标识 棋盘每个位置的相邻元素，也就是可以移动的邻点，都是确定的，我们可以用固定的数组表示 有了这两个妙想后，就把这道题转换为了BFS遍历。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758class Solution &#123;public: std::string tran2str(vector&lt;vector&lt;int&gt;&gt;&amp; board) &#123; string res = &quot;&quot;; for (auto&amp;&amp; line : board) &#123; for (auto&amp;&amp; c : line) &#123; res += to_string(c); &#125; &#125; return res; &#125; vector&lt;vector&lt;int&gt;&gt; neighbor_index = &#123;&#123;1, 3&#125;, &#123;0, 4, 2&#125;, &#123;1, 5&#125;, &#123;0, 4&#125;, &#123;3, 1, 5&#125;, &#123;4, 2&#125;&#125;; int slidingPuzzle(vector&lt;vector&lt;int&gt;&gt;&amp; board) &#123; auto get_zero_index = [](string&amp; str) -&gt; int &#123; for (int i = 0; i &lt; str.size(); i++) &#123; if (str[i] == &#x27;0&#x27;) &#123; return i; &#125; &#125; return 0; &#125;; auto swap_char = [](string str, int index1, int index2) &#123; swap(str[index1], str[index2]); return str; &#125;; int depth = 0; string initial = tran2str(board); queue&lt;string&gt; que; unordered_set&lt;string&gt; visited; que.push(initial); visited.insert(initial); while (que.size() &gt; 0) &#123; int size = que.size(); for (int i = 0; i &lt; size; i++) &#123; string front_str = que.front(); que.pop(); if (front_str == &quot;123450&quot;) &#123; return depth; &#125; int index = get_zero_index(front_str); vector&lt;int&gt; neighbors = neighbor_index[index]; for (int neighbor : neighbors) &#123; string new_str = swap_char(front_str, index, neighbor); if (visited.find(new_str) == visited.end()) &#123; que.push(new_str); visited.insert(new_str); &#125; &#125; &#125; depth++; &#125; return -1; &#125;&#125;; 注意： 需要使用一个visited集合记录已访问的节点，否则会陷入死循环 que和visited在初始化字符串的时候，就需要push和insert 只有当确认没有访问过这个节点，que和visited才需要push和insert 752.打开转盘锁这道题的思路和上一道题可以说是一模一样，但是需要注意的是，转’9’加一要到‘0’，‘0’减一要到’9’。 123456789101112131415161718192021222324252627282930313233343536373839404142int openLock(vector&lt;string&gt;&amp; deadends, string target) &#123; unordered_set&lt;string&gt; deadends_set(deadends.begin(), deadends.end()); if (deadends_set.find(&quot;0000&quot;) != deadends_set.end()) &#123; return -1; &#125; queue&lt;string&gt; que; unordered_set&lt;string&gt; visited; string initial = &quot;0000&quot;; que.push(initial); visited.insert(initial); int depth = 0; while (!que.empty()) &#123; int size = que.size(); for (int i = 0; i &lt; size; i++) &#123; string front_str = que.front(); que.pop(); if (front_str == target) &#123; return depth; &#125; for (int j = 0; j &lt; front_str.size(); j++) &#123; string new_str = front_str; new_str[j] = (new_str[j] == &#x27;9&#x27;) ? &#x27;0&#x27; : new_str[j] + 1; if (deadends_set.find(new_str) == deadends_set.end() &amp;&amp; visited.find(new_str) == visited.end()) &#123; visited.insert(new_str); que.push(new_str); &#125; string new_str2 = front_str; new_str2[j] = (new_str2[j] == &#x27;0&#x27;) ? &#x27;9&#x27; : new_str2[j] - 1; if (deadends_set.find(new_str2) == deadends_set.end() &amp;&amp; visited.find(new_str2) == visited.end()) &#123; visited.insert(new_str2); que.push(new_str2); &#125; &#125; &#125; depth++; &#125; return -1;&#125; 需要注意把vector的查找，转换为set的查找，否则时间复杂度直接就上去了，会有一些案例无法通过 一个很不错的优化方案，就是把deadends开始就加入到visited里，非常的合理和巧妙。"},{"title":"Hello World","path":"/2024/12/21/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"}]