[{"title":"C++疏漏记录","path":"/2024/12/27/cpp/","content":"作为靠C++吃饭的选手，但是好多地方都理解的不够到位，就在这个帖子里记录下每次学到的东西吧~ 最大堆&#x2F;优先队列C++提供了priority_queue，默认是最大堆 TODO依稀记得最大堆只需要使用数组就可以完成了，后面复习下数据结构！ 自定义排序priority_queue的默认排序规则是最大堆，当我们需要一个最小堆时，就需要一个自定义的排序对则，仿函数和lambda函数都可以完成这一人物。 1234567struct Compare &#123; bool operator()(int a, int b) &#123; return a &gt; b; &#125;&#125;;std::priority_queue&lt;int, std::vector&lt;int&gt;, Compare&gt; minHeap; 12345auto compare = [](int a, int b) &#123; return a &gt; b; &#125;;std::priority_queue&lt;int, std::vector&lt;int&gt;, decltype(compare)&gt; minHeap(compare); 但是其实一直不明白的是，为什么return a &gt; b就是从小按大排序呢。其实可以把C++的排序，按照优先级去理解。当compare(a,b) &#x3D; true时，那么a的优先级就是小于b的。 比如std::sort默认就是把优先级高的往后排，对于正常的int而言，且没有重载运算符，当 a &lt; b时，那么默认的int排序规则就会返回true，b的优先级就更高，那调用std::sort的时候，就会把b放在a后面，最后结果就是由小到大。 同理，priority_queue默认就是把优先级高的放在堆顶，我们重载的compare，当a的值小于b时，那么返回false，则会认为a的优先级比b高，那就会把a放在堆顶，因此就变成了最小堆。 对象构造之前堆std::sort做排序的时候，仿函数和lambda函数完全一致，但是突然发现，对于上面的优先队列而言，好像并不这么一回事。 12template &lt;typename T, typename Container = std::vector&lt;T&gt;, typename Compare = std::less&lt;typename Container::value_type&gt;&gt;class priority_queue; 这是优先队列的定义，注意这是一个模板，那注定，构造的时候，传入的模板的第三个参数，需要时一个类型，而非对象。 所以compare &#x3D; [](int a, int b) 定义了一个对象，但是传入模板的时候，需要decltype(compare)获取它的具体类型。而仿函数，本身就是一个struct，有明确的类型，直接可以作为模板参数。 此外，可以发现初始化时，lambda还需要多传一个lambda对象进去，而仿函数不用。这是因为priority_queue需要一个compare实例，仿函数有默认构造函数，可以直接构造；但lambda没有，所以就只能传一个进去。"},{"title":"My Trick on Windows & Linux","path":"/2024/12/23/trick/","content":"这里记录一下自己在鼓捣自己电脑的时候，成功试验并觉得有效提升使用体验的一些小技巧吧~ Windows终端windows的cmd命令，可以说是非常的让人无语了，和linux完全的不兼容。而且学习成本非常的高昂。太扯淡啦！&#x1F4A9; 后面推出的WT（windows terminal），虽然在原cmd的基础上增添了很多东西，但是还是完全没法用的程度。继续无语&#x3D;&#x3D;&#x3D; &#x1F33F;。 幸好我们拥有git！安装完git后，我们会直接得到一个git bash。提供了非常接近bash的环境！狂喜！那么，我们可以直接在WT中，设置默认打开的终端环境，这样体验感直接up up! &#x1F44F; 同理，vscode中也可以如此设置~ 快捷键WT的使用频率一高，不想在桌面增加快捷方式，又想要一个快捷的打开方式，该怎么办呢？很自然的想法就是，设置一个快捷键，类似ubuntu的 ctrl + shift + T 一键打开终端。 个人了解的windows的快捷键添加方式有两种： exe发送快捷方式到桌面，右键，巴拉巴拉找到一个快捷键（记不清了） autohotkey！新发现的很不错的软件，本人现在的快捷键也是通过此来配置的 autohotkey官网可直接安装，仅需3M。接下来就是简单了解下它的脚本规则，快捷键的设置规则就是： 1234hotkey ::&#123; Run app&#125; 当然这个软件应当是还可以做很多事情，但是哥们只看了几秒快捷键的设置，只知道这些。 本人目前设置了两个快捷键，已爽翻： Ctrl + Shift + W -&gt; WT Ctrl + Shift + T -&gt; WSL 最后一步将配置文件放置到C:\\Users\\{user_name}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup中，即可开机自启，大功告成！ gcc &amp; clang 安装很"},{"title":"LeetCode刷题记录","path":"/2024/12/21/leetcode/","content":"记录刷题的每一天！感受逐渐变强的自己！ 环境配置VsCode + labuladong vscodevscode的安装无需多言了 leetcode 插件在leetcode网站上刷题体验感实际上是很一般的。主要是补全差劲；字体难看；等等等。所有就有了leetcode刷题插件的诞生。可以自由的在vscode里读题、写代码、提交代码。 但很不好的是，它给你生成的代码内容是不包含头文件的，会导致vscode报错飘红，体验感依旧不足够高。 labuladong的算法插件labuladong大佬在leetcode插件上进一步开发的。属于是弥补了原插件的许多不足之处。具体的说法和细则，请看官网。体验感已经是本人能找到的非常棒的了。不过还有缺点就是，不能直接构造main函数，构建测试用例，使得可以直接开始debug。 另外仍需注意，该插件只能用cookie登录。需要在网络控制台中，抓一个带有cookie字样的包然后右键， Copy as cURL (bash)，随后开启新世界大门！ 547 省份数量老听并查集的大名，但是一直没有学习过，直接拿上547题来练手。 并查集学过一遍之后，并查集应该是要用数组表示的树？很吊的。 反正啥操作前都加个find_parent就对了！ 构造函数一个并查集可以有n个节点，初始化时，各个节点都先自己指向自己，每个节点都是一个单独的集合。 123456UnionFind(int n)&#123; array_.resize(n); for(int i = 0 ; i &lt; n;i++)&#123; array_[i] = i; // 并查集自己先指向自己 &#125;&#125; 合并函数合并函数就是一个集合的父节点，指向另一个集合的父节点，这样他们就合并成了一撮，变成了同一个集合。 1234void to_union(int child, int parent)&#123; // ! 注意，并查集的操作，是对父节点的操作，一切要以父节点为准 array_[find_parent(child)] = find_parent(parent);&#125; 其他的合并方式假如union(1,2)、union(2,3)、union(3,4)，这样循环的调用，那节点之间的指向关系，明显是一个链状的，当然这是最坏的情况，有没有什么好的压缩的方法呢？ 其实就是希望合并之后，树的高度尽可能的矮嘛，那可以额外的增加一个数组，记录每个集合的高度，合并的时候，矮的指向高的，不就不会导致高度过分的增加了嘛。 当然，更佳的一个做法是，用上路径压缩。 寻根函数（带路径压缩）讲解视频 12345678910int find_parent(int i)&#123; // 视频中所述，并查集要注意 !路径压缩! 不然一个集合里的排布是一长串，复杂度不是最优 if (array_[i] == i)&#123; return i; // 已经找到根节点了 &#125;else&#123; array_[i] = find_parent(array_[i]); // 这里就是在做路径压缩 return array_[i]; &#125;&#125; 一共有多少集合呢反正我是用一个集合，但是感觉实际是很愚蠢的！ 1234567int get_num()&#123; unordered_set&lt;int&gt; statistic_set; for (int i = 0; i &lt; array_.size(); i++)&#123; statistic_set.insert(find_parent(i)); &#125; return statistic_set.size();&#125; 可以在每次合并，就将合并次数++！那集合的数量，不就是 size - merge_count吗！ 不解但是并查集的时间复杂度咋算呢？回头再学习学习吧。 链表题目21.合并两个有序链表 &amp;&amp; 86.分隔链表主要涉及到的技巧是： dummy虚拟头结点的使用，可以有效的避免很多的边界条件判断 如果是把原链表重新构造成一个新的链表，那总是需要断开原链表之间的连接关系，欲断不断，就会导致最后的链有可能成环，一定要注意！ 23.合并k个有序链表这题一看有点蒙蔽，这怎么比节点们的大小，然后瞅一眼题解，竟然是已经遗忘已久的优先队列，惭愧惭愧，彻底的还给老师了。这题显然也是没有涉及new操作的，把原链表拼成新链表的操作，类似上面提到的，要断开每个节点之间的联系。当然这题可以不断，但是还是保持这个好习惯的好。 然后值得记录的是，C++优先队列的初始化，记录在同级的C++博客中了。"},{"title":"Hello World","path":"/2024/12/21/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"}]